?.?.?
  - Added ability to format *arbitrary* Ruby object
  - Added :limit option to limit large output for arrays and hashes (Andrew Horsman)

0.4.0
  - 'ap object' now returns the object (Stephan Hagemann)
  - Added :html => true option to enable HTML colors rather that ANSI (ex. Sinatra templates)
  - Added AwesomePrint.force_colors! to allow color output on demand (Andrew O'Brien)
  - Added MongoMapper formatter mixin (Elpizo Choi)
  - Fixed formatting of methods array when object#method is overridden
  - Fixed potential stack errors by checking whether AwesomePrint is already loaded
  - Improved Ruby 1.8.6 and 1.8.7 compatibility
  - Improved Windows compatibility (Viktar Basharymau)

0.3.2
  - Make sure Rails mixins get loaded in Rails console when required from .irbrc
  - Fixed an issue with classes that define their own #send method (ex: Socket)
  - Fixed compatibility issue with Liquid gem that defines Module#liquid_methods
  - Fixed hash spec for Ruby < 1.9 where order of hash keys is not guaranteed
  - Added :sorted_hash_keys option to sort hash keys (Ed Ruder)

0.3.1 RubyConf X edition
  - Fixed Ruby 1.8.6 compatibility issues (thanks, Tim!)
  - Fixed stack overflow issue with Rails 2.3.x console

0.3.0
  - Display object.methods and family in human readable format
  - Objects inherited from Array, Hash, File, Dir, and Struct are shown as their base class
  - Added option to suppress array index in output (Sean Gallagher)
  - Updated README on how to set up ~/.irbrc for MacRuby (Eloy Duran)
  - Specs pass 100% with Ruby 1.8.7/RSpec 1.3 and Ruby 1.9.2/RSpec 2.0

0.2.1
  - ap can now be used within Rails templates (ex. <%= ap object %>)
  - Added support for printing Struct

0.2.0
  - Added support for logger.ap (including Rails logger)
  - Added support for HashWithIndifferentAccess from ActiveSupport
  - ap now works with scripts that use ActiveRecord/ActiveSupport outside Rails
  - ap now correctly shows file and directory names with fancy characters (shell escape)

0.1.4
  - Format BigDecimal and Rational objects as Float scalars
  - Explicit options parameter can override custom defaults
  - Custom defaults are not interfering when running specs
  - Custom defaults now work correctly with Ruby 1.9.x

0.1.3
  - Added support for setting custom defaults in ~/.aprc
  
0.1.2
  - Correctly handle empty arrays and hashes
  - Use alias_method instead of alias (fixes non-tty method aliasing)
  - Added awesome_inspect method

0.1.1
  - Added support for tableless ActiveRecord models
  - Left align hash keys if @options[:indent] is negative
  
0.1.0
  - Initial Release.
  